{"version":3,"sources":["utils.js","modules/DraggablePath/DraggablePath.js","modules/PathCommandsList/PathCommandsList.jsx","modules/DiffViewer/DiffViewer.jsx","App.js","serviceWorker.js","index.js"],"names":["CLOSE_PATH","MOVE_TO","HORIZ_LINE_TO","VERT_LINE_TO","LINE_TO","CURVE_TO","SMOOTH_CURVE_TO","QUAD_TO","SMOOTH_QUAD_TO","ARC","getPathCommands","pathData","SVGPathData","toAbs","transform","SVGPathDataTransformer","ROUND","commands","getEncodedPathCommands","map","command","encodeSVGPath","getPathCommandsWithPreviousPoint","INFO","prevX","prevY","getPathCommandsAsCubicCurves","NORMALIZE_HVZ","type","x1","Number","x","y1","y","x2","y2","NORMALIZE_ST","A_TO_C","QT_TO_C","encode","getRoundedAbsolutePathData","getSegments","pathCommands","selectedCommand","highlightedCommand","onMouseOver","onMouseOut","onClick","i","d","getSingleSegmentPathData","id","className","stroke","strokeWidth","fill","key","getNormalizedPathCommands","data","scale","scaledPathData","getScaledPathData","pathDataAsCubicCurves","DraggablePath","onDragEnd","arePointsVisible","areControlPointsVisible","useState","setPathCommands","useEffect","width","height","onDrag","onStop","segment","axis","defaultClassNameDragging","position","positionOffset","e","posX","posY","newPathCommands","segmentIndex","opacity","r","cx","cy","getPoints","PathCommandsList","onSave","isShowingEncodedPathCommands","encodedPathCommands","setEncodedPathCommands","refs","reduce","acc","value","React","createRef","current","scrollIntoViewIfNeeded","behavior","block","inline","handleSaveCommandEdit","newPathData","index","newCommands","join","ref","Types","TEXT","saveButtonLabel","cancelButtonLabel","attributes","number","console","log","Error","getPathCommandType","Object","entries","filter","entry","DiffViewer","oldValue","newValue","splitView","examplePathData","App","canvasRef","useRef","inputPathData","setInputPathData","setPathData","setScale","setSelectedCommand","setHighlightedCommand","setIsShowingEncodedPathCommands","setArePointsVisible","setAreControlPointsVisible","highlightCommand","unhighlightCommand","handleCommandTypeToggle","onSubmit","preventDefault","placeholder","onChange","target","readOnly","text","checked","name","newData","step","min","max","getSliderValueFromScale","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c65d9cc.chunk.js","sourcesContent":["import { SVGPathData, encodeSVGPath, SVGPathDataTransformer } from \"svg-pathdata\";\n\nexport const getScaledPathData = (d, scale) => new SVGPathData(d)\n    .toAbs()\n    .scale(scale, scale)\n    .encode();\n\nexport const pathCommandTypes = {\n  CLOSE_PATH: \"CLOSE_PATH\",\n  MOVE_TO: \"MOVE_TO\",\n  HORIZ_LINE_TO: \"HORIZ_LINE_TO\",\n  VERT_LINE_TO: \"VERT_LINE_TO\",\n  LINE_TO: \"LINE_TO\",\n  CURVE_TO: \"CURVE_TO\",\n  SMOOTH_CURVE_TO: \"SMOOTH_CURVE_TO\",\n  QUAD_TO: \"QUAD_TO\",\n  SMOOTH_QUAD_TO: \"SMOOTH_QUAD_TO\",\n  ARC: \"ARC\",\n};\n\nconst {\n  CLOSE_PATH,\n  MOVE_TO,\n  HORIZ_LINE_TO,\n  VERT_LINE_TO,\n  LINE_TO,\n  CURVE_TO,\n  SMOOTH_CURVE_TO,\n  QUAD_TO,\n  SMOOTH_QUAD_TO,\n  ARC,\n} = pathCommandTypes;\n\nexport const getPathCommandType = (number) => {\n  switch (number) {\n    case 1:\n      return CLOSE_PATH;\n    case 2:\n      return MOVE_TO;\n    case 4:\n      return HORIZ_LINE_TO;\n    case 8:\n      return VERT_LINE_TO;\n    case 16:\n      return LINE_TO;\n    case 32:\n      return CURVE_TO;\n    case 64:\n      return SMOOTH_CURVE_TO;\n    case 128:\n      return QUAD_TO;\n    case 256:\n      return SMOOTH_QUAD_TO;\n    case 512:\n      return ARC;\n    default:\n      console.log(number);\n      throw new Error(\"the given path command type is not recognized\");\n  }\n};\n\nexport const getPathCommands = pathData =>\n    new SVGPathData(pathData).toAbs().transform(SVGPathDataTransformer.ROUND(4)).commands;\n\nexport const getEncodedPathCommands = (pathData) =>\n  new SVGPathData(pathData)\n    .toAbs()\n    .transform(SVGPathDataTransformer.ROUND(4))\n    .commands.map((command) => encodeSVGPath(command));\n\n  const L_TO_C = () => {\n    return SVGPathDataTransformer.INFO((command, prevX, prevY) => {\n      if (command.type & SVGPathData.LINE_TO) {\n        command.type = SVGPathData.CURVE_TO;\n        command.x1 = (Number(command.x) + Number(prevX)) / 2;\n        command.y1 = (command.y + prevY) / 2;\n        command.x2 = (command.x + prevX) / 2;\n        command.y2 = (command.y + prevY) / 2;\n      }\n      return command;\n    });\n  };\n\nexport const WITH_PREV_POINT = () => {\n  return SVGPathDataTransformer.INFO((command, prevX, prevY) => {\n    command.prevX = prevX;\n    command.prevY = prevY;\n    return command;\n  });\n};\n\nexport const getPathCommandsWithPreviousPoint = pathData => new SVGPathData(pathData).transform(WITH_PREV_POINT()).commands;\n\nexport const getPathCommandsAsCubicCurves = (pathData) => {\n  // NORMALIZE_HVZ() = Convert H, V, Z and A with rX = 0 to L\n  // L_TO_C() - create my own transform function that converts L to C where C1 = C2 = midpoint of L points\n  // NORMALIZE_ST() - Transforms smooth curves and quads to normal curves and quads (SsTt to CcQq)\n  // A_TO_C() - Convert arc commands to curve commands\n  // QT_TO_C() - A quadratic bézier curve can be represented by a cubic bézier curve which has the same end points as the quadratic and both control points in place of the quadratic\"s one.\n  // This transformer replaces QqTt commands with Cc commands respectively\n  return new SVGPathData(pathData)\n    .toAbs()\n    .transform(SVGPathDataTransformer.NORMALIZE_HVZ())\n    .transform(L_TO_C())\n    .transform(SVGPathDataTransformer.NORMALIZE_ST())\n    .transform(SVGPathDataTransformer.A_TO_C())\n    .transform(SVGPathDataTransformer.QT_TO_C())\n    .encode();\n};\n\nexport const getRoundedAbsolutePathData = pathData => new SVGPathData(pathData)\n  .toAbs()\n  .transform(SVGPathDataTransformer.ROUND(4))\n  .encode();\n\nexport const getFromBetween = {\n    results: [],\n    string: \"\",\n    getFromBetween: function (sub1, sub2) {\n        if (this.string.indexOf(sub1) < 0 || this.string.indexOf(sub2) < 0) return false;\n        var SP = this.string.indexOf(sub1) + sub1.length;\n        var string1 = this.string.substr(0, SP);\n        var string2 = this.string.substr(SP);\n        var TP = string1.length + string2.indexOf(sub2);\n        return this.string.substring(SP, TP);\n    },\n    removeFromBetween: function (sub1, sub2) {\n        if (this.string.indexOf(sub1) < 0 || this.string.indexOf(sub2) < 0) return false;\n        var removal = sub1 + this.getFromBetween(sub1, sub2) + sub2;\n        this.string = this.string.replace(removal, \"\");\n    },\n    getAllResults: function (sub1, sub2) {\n        // first check to see if we do have both substrings\n        if (this.string.indexOf(sub1) < 0 || this.string.indexOf(sub2) < 0) return;\n\n        // find one result\n        var result = this.getFromBetween(sub1, sub2);\n        // push it to the results array\n        this.results.push(result);\n        // remove the most recently found one from the string\n        this.removeFromBetween(sub1, sub2);\n\n        // if there's more substrings\n        if (this.string.indexOf(sub1) > -1 && this.string.indexOf(sub2) > -1) {\n            this.getAllResults(sub1, sub2);\n        }\n        else return;\n    },\n    get: function (string, sub1, sub2) {\n        this.results = [];\n        this.string = string;\n        this.getAllResults(sub1, sub2);\n        return this.results;\n    }\n};\n\n","import React, { useState, useEffect } from \"react\";\nimport {\n  SVGPathData,\n  encodeSVGPath,\n} from \"svg-pathdata\";\nimport { getScaledPathData } from 'utils';\nimport \"./styles.scss\";\nimport { getPathCommandsWithPreviousPoint, getPathCommandsAsCubicCurves } from \"utils\";\nimport Draggable from 'react-draggable';\n\n// For our draggable path, we will convert everything we need into Cubic bezier curves! That way we can always show the same amount of points! Start, end, and two control points :)\n  // WOW this is mindblowing. Because we can't represent Arcs as a single cubic bezier, but we can represent it as a series of these!\n\nconst getSingleSegmentPathData = command => {\n  if (command.type & SVGPathData.CURVE_TO) {\n    const { prevX, prevY, x1, y1, x2, y2, x, y } = command;\n    return `M${prevX} ${prevY} C${x1} ${y1} ${x2} ${y2} ${x} ${y}`;\n  } else {\n    return encodeSVGPath(command);\n  }\n}\n\n// const getPoints = [...getXYPoints(pathCommands), ...getX1Y1Points(pathCommands), ...getX2Y2Points(pathCommands)];\n// const getX2Y2Points =\n// const getX1Y1Points = []\n\nconst getSegments = ({ pathCommands, selectedCommand, highlightedCommand, onMouseOver, onMouseOut, onClick }) => pathCommands.map((command, i) => {\n    const d = getSingleSegmentPathData(command);\n      return (\n        <path\n          onMouseOver={() => onMouseOver(i)}\n          onMouseOut={onMouseOut}\n          onClick={() => onClick(i)}\n          id={i}\n          className=\"path-segment\"\n          d={d}\n          stroke={\n            i === selectedCommand\n              ? \"#e76f51\"\n              : i === highlightedCommand\n              ? \"#f4a261\"\n              : \"lightgrey\"\n          }\n          strokeWidth=\"2px\"\n          fill=\"none\"\n          key={i}\n        />\n      );\n    });\n  \n  const getNormalizedPathCommands = (data, scale) => {\n    const scaledPathData = getScaledPathData(data, scale);\n    const pathDataAsCubicCurves = getPathCommandsAsCubicCurves(scaledPathData);\n    return getPathCommandsWithPreviousPoint(\n      pathDataAsCubicCurves\n    );\n  };\n  \nconst getPoints = ({ pathCommands, onDrag, onStop, arePointsVisible, areControlPointsVisible }) => {\n  const points = pathCommands.map((segment, i) => {\n    const { x, y, x1, y1, x2, y2 } = segment;\n\n    const handleDragXY = (e, position) => {\n        const { x: posX, y: posY } = position;\n        const newPathCommands = pathCommands.map((segment, segmentIndex) => {\n          if (i === segmentIndex) {\n            return { ...segment, x: posX, y: posY };\n          } else if (i === segmentIndex - 1) {\n            return { ...segment, prevX: posX, prevY: posY };\n          }\n          return segment;\n        });\n        return onDrag(newPathCommands);\n      };\n\n    const handleDragX1Y1 = (e, position) => {\n      const { x: posX, y: posY } = position;\n      const newPathCommands = pathCommands.map((segment, segmentIndex) => {\n        if (i === segmentIndex) {\n          return { ...segment, x1: posX, y1: posY };\n        } \n        return segment;\n      });\n      return onDrag(newPathCommands);\n    };\n\n    const handleDragX2Y2 = (e, position) => {\n      const { x: posX, y: posY } = position;\n      const newPathCommands = pathCommands.map((segment, segmentIndex) => {\n        if (i === segmentIndex) {\n          return { ...segment, x2: posX, y2: posY };\n        }\n        return segment;\n      });\n      return onDrag(newPathCommands);\n    };\n\n    return (\n      <>\n        {arePointsVisible && (\n          <Draggable\n            axis=\"both\"\n            defaultClassNameDragging=\"dragging\"\n            position={{ x, y }}\n            positionOffset={{ x: -x, y: -y }}\n            onStop={onStop}\n            onDrag={handleDragXY}\n            key={`${i}-xy`}\n          >\n            <circle\n              fill=\"green\"\n              opacity=\"0.8\"\n              r={5}\n              cx={x}\n              cy={y}\n            />\n          </Draggable>\n        )}\n        {areControlPointsVisible && (\n          <>\n            <Draggable\n              axis=\"both\"\n              defaultClassNameDragging=\"dragging\"\n              position={{ x: x1, y: y1 }}\n              positionOffset={{ x: -x1, y: -y1 }}\n              onStop={onStop}\n              onDrag={handleDragX1Y1}\n              key={`${i}-x1y1`}\n            >\n              <circle\n                fill=\"red\"\n                opacity=\"0.8\"\n                r={3}\n                cx={x1}\n                cy={y1}\n              />\n            </Draggable>\n            <Draggable\n              axis=\"both\"\n              defaultClassNameDragging=\"dragging\"\n              position={{ x: x2, y: y2 }}\n              positionOffset={{ x: -x2, y: -y2 }}\n              onStop={onStop}\n              onDrag={handleDragX2Y2}\n              key={`${i}-x2y2`}\n            >\n              <circle\n                fill=\"red\"\n                opacity=\"0.8\"\n                r={3}\n                cx={x2}\n                cy={y2}\n              />\n            </Draggable>\n          </>\n        )}\n      </>\n    );\n  });\n  return points;\n};\n\nconst DraggablePath = ({ data, scale = 1, selectedCommand, highlightedCommand, onMouseOver, onMouseOut, onClick, onDragEnd, arePointsVisible, areControlPointsVisible }) => {\n  const [pathCommands, setPathCommands] = useState(getNormalizedPathCommands(data, scale));\n  const onDrag = commands => setPathCommands(commands);\n  const onStop = () => onDragEnd(new SVGPathData(encodeSVGPath(pathCommands)).scale(1/scale, 1/scale).encode());\n\n  useEffect(() => { \n    setPathCommands(getNormalizedPathCommands(data, scale));\n  }, [data, scale]);\n\n  return (\n    <svg width={\"100%\"} height={\"100%\"}>\n      {getSegments({\n        pathCommands,\n        selectedCommand,\n        highlightedCommand,\n        onMouseOver,\n        onMouseOut,\n        onClick,\n      })}\n      {getPoints({ pathCommands, onDrag, onStop, arePointsVisible, areControlPointsVisible })}\n    </svg>\n  );\n}\n\nexport default DraggablePath;\n","import React, { useState, useEffect } from \"react\";\nimport { encodeSVGPath } from \"svg-pathdata\";\nimport EasyEdit, { Types } from \"react-easy-edit\";\nimport { getPathCommands, getEncodedPathCommands, getPathCommandType } from 'utils';\n\nimport './styles.scss';\nimport \"App.scss\";\n\nconst PathCommandsList = ({ pathData, selectedCommand, highlightedCommand, onMouseOver, onMouseOut, onSave, isShowingEncodedPathCommands }) => {    \n  const [pathCommands, setPathCommands] = useState(getPathCommands(pathData));\n  const [encodedPathCommands, setEncodedPathCommands] = useState(getEncodedPathCommands(pathData));\n\n  const refs = pathCommands.reduce((acc, value, i) => {\n    acc[i] = React.createRef();\n    return acc;\n    }, {});\n\n  useEffect(() => { \n      if (\n        highlightedCommand &&\n        refs[highlightedCommand].current\n      ) {\n        refs[highlightedCommand].current.scrollIntoViewIfNeeded({\n          behavior: \"smooth\",\n            block: \"start\",\n            inline: \"nearest\"\n        });\n      }\n      \n  }, [highlightedCommand, refs]);\n\n  useEffect(() => { \n    setPathCommands(getPathCommands(pathData));\n    setEncodedPathCommands(getEncodedPathCommands(pathData));\n  }, [pathData]);\n\n    const handleSaveCommandEdit = ({ index, value, key }) => {\n        let newPathData;\n        if (key) {\n            const newCommands = pathCommands.map((command, i) => {\n                if (i === index) {\n                    return { ...command, [key]: value }\n                } else {\n                    return command;\n                }\n            });\n            setPathCommands(newCommands);\n            newPathData = encodeSVGPath(newCommands);\n        } else {\n            const newCommands = encodedPathCommands.map((command, i) => {\n                if (i === index) {\n                    return value;\n                } else {\n                    return command;\n                }\n            });\n            setEncodedPathCommands(newCommands);\n            newPathData = newCommands.join('');\n        }\n        return onSave(newPathData);\n    };\n\n  return (\n      <div>\n        {isShowingEncodedPathCommands\n          ? encodedPathCommands.map((command, i) => {\n              return (\n                <div\n                  key={i}\n                  className=\"board-item\"\n                  onMouseOver={() => onMouseOver(i)}\n                  onMouseOut={onMouseOut}\n                  ref={refs[i]}\n                >\n                  <div\n                    className={`board-item-content ${\n                      i === selectedCommand\n                        ? \"is-selected\"\n                        : i === highlightedCommand\n                        ? \"is-highlighted\"\n                        : \"\"\n                    }`}\n                  >\n                    <EasyEdit\n                      type={Types.TEXT}\n                      onSave={(value) =>\n                        handleSaveCommandEdit({ value, index: i })\n                      }\n                      saveButtonLabel=\"Save\"\n                      cancelButtonLabel=\"Cancel\"\n                      attributes={{ id: i }}\n                      value={command}\n                    />\n                  </div>\n                </div>\n              );\n            })\n          : pathCommands.map((command, i) => {\n              return (\n                <div\n                  key={i}\n                  className=\"board-item\"\n                  onMouseOver={() => onMouseOver(i)}\n                  onMouseOut={onMouseOut}\n                  ref={refs[i]}\n                >\n                  <div\n                    className={`board-item-content ${\n                      i === selectedCommand\n                        ? \"is-selected\"\n                        : i === highlightedCommand\n                        ? \"is-highlighted\"\n                        : \"\"\n                    }`}\n                  >\n                    <p className=\"has-text-left has-text-primary\">\n                      {getPathCommandType(command.type)}\n                    </p>\n                    <div className=\"tile\">\n                      {Object.entries(command)\n                        .filter(\n                          (entry) =>\n                            entry[0] !== \"type\" && entry[0] !== \"relative\"\n                        )\n                        .map((entry) => (\n                          <div className=\"tile is-2\">\n                            <p\n                              className=\"has-text-primary\"\n                              key={`${entry[0]}-${entry[1]}`}\n                            >\n                              {entry[0]}:&nbsp;\n                            </p>\n                            <EasyEdit\n                              type={Types.TEXT}\n                              onSave={(value) =>\n                                handleSaveCommandEdit({\n                                  key: entry[0],\n                                  value,\n                                  index: i,\n                                })\n                              }\n                              saveButtonLabel=\"Save\"\n                              cancelButtonLabel=\"Cancel\"\n                              attributes={{\n                                id: `input-${entry[0]}-${entry[1]}`,\n                              }}\n                              value={entry[1]}\n                            />\n                          </div>\n                        ))}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n      </div>\n  );\n};\n\nexport default PathCommandsList;","import React from 'react';\nimport ReactDiffViewer from \"react-diff-viewer\";\n\nconst DiffViewer = ({ oldValue, newValue }) => {\n  return (\n    <ReactDiffViewer oldValue={oldValue} newValue={newValue} splitView={true} />\n  );\n};\n\nexport default DiffViewer;","import React, { useRef, useState } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport DraggablePath from \"modules/DraggablePath/DraggablePath\";\nimport PathCommandsList from 'modules/PathCommandsList/PathCommandsList';\nimport DiffViewer from 'modules/DiffViewer/DiffViewer';\nimport { getRoundedAbsolutePathData } from 'utils';\n\nimport \"./App.scss\";\n\n// const examplePathData = \"M 110,10 l 80,80 v -80 h -40\";\nconst examplePathData =\n  \"M4.317,16.411c-1.423-1.423-1.423-3.737,0-5.16l8.075-7.984c0.994-0.996,2.613-0.996,3.611,0.001C17,4.264,17,5.884,16.004,6.88l-8.075,7.984c-0.568,0.568-1.493,0.569-2.063-0.001c-0.569-0.569-0.569-1.495,0-2.064L9.93,8.828c0.145-0.141,0.376-0.139,0.517,0.005c0.141,0.144,0.139,0.375-0.006,0.516l-4.062,3.968c-0.282,0.282-0.282,0.745,0.003,1.03c0.285,0.284,0.747,0.284,1.032,0l8.074-7.985c0.711-0.71,0.711-1.868-0.002-2.579c-0.711-0.712-1.867-0.712-2.58,0l-8.074,7.984c-1.137,1.137-1.137,2.988,0.001,4.127c1.14,1.14,2.989,1.14,4.129,0l6.989-6.896c0.143-0.142,0.375-0.14,0.516,0.003c0.143,0.143,0.141,0.374-0.002,0.516l-6.988,6.895C8.054,17.836,5.743,17.836,4.317,16.411\";\n// const examplePathData = \"M2.568,7.179H8.96c1.411,0,2.557-1.145,2.557-2.557c0-1.412-1.146-2.557-2.557-2.557H8.534c-0.235,0-0.426,0.19-0.426,0.426c0,0.236,0.191,0.426,0.426,0.426H8.96c0.941,0,1.704,0.763,1.704,1.705S9.901,6.327,8.96,6.327H2.568c-0.236,0-0.426,0.19-0.426,0.426C2.142,6.988,2.333,7.179,2.568,7.179 M15.778,7.179c0-0.941-0.763-1.704-1.704-1.704h-0.427c-0.235,0-0.426,0.19-0.426,0.426c0,0.235,0.19,0.426,0.426,0.426h0.427c0.47,0,0.852,0.382,0.852,0.852c0,0.471-0.382,0.853-0.852,0.853H0.864c-0.236,0-0.426,0.19-0.426,0.426c0,0.235,0.19,0.426,0.426,0.426h13.21C15.016,8.884,15.778,8.12,15.778,7.179 M16.631,9.736H2.568c-0.236,0-0.426,0.19-0.426,0.426c0,0.236,0.19,0.426,0.426,0.426h14.062c0.94,0,1.704,0.764,1.704,1.705s-0.764,1.704-1.704,1.704h-0.427c-0.235,0-0.426,0.19-0.426,0.427c0,0.235,0.19,0.426,0.426,0.426h0.427c1.411,0,2.557-1.145,2.557-2.557S18.042,9.736,16.631,9.736 M10.665,11.44H4.273c-0.236,0-0.426,0.19-0.426,0.426c0,0.236,0.19,0.427,0.426,0.427h6.392c1.412,0,2.557,1.145,2.557,2.557s-1.146,2.557-2.557,2.557h-0.426c-0.236,0-0.426,0.19-0.426,0.426s0.19,0.427,0.426,0.427h0.426c1.883,0,3.41-1.526,3.41-3.409S12.548,11.44,10.665,11.44\";\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [inputPathData, setInputPathData] = useState(\n    getRoundedAbsolutePathData(examplePathData)\n  );\n  const [pathData, setPathData] = useState(getRoundedAbsolutePathData(examplePathData));\n  const [scale, setScale] = useState(1);\n  const [selectedCommand, setSelectedCommand] = useState(null);\n  const [highlightedCommand, setHighlightedCommand] = useState(null);\n  const [\n    isShowingEncodedPathCommands,\n    setIsShowingEncodedPathCommands,\n  ] = useState(true);\n  const [arePointsVisible, setArePointsVisible] = useState(false);\n  const [areControlPointsVisible, setAreControlPointsVisible] = useState(false);\n\n  const highlightCommand = i => setHighlightedCommand(i);\n  const unhighlightCommand = () => setHighlightedCommand(null);\n  const selectCommand = i => setSelectedCommand(i);\n  const updatePathData = newData => setPathData(newData);\n  const getSliderValueFromScale = scale => {\n    let sliderValue;\n    if (scale >= 1) {\n      sliderValue = scale - 1;\n    } else {\n      sliderValue = -1 / scale + 1; \n    }\n    return sliderValue;\n  };\n  const getScaleFromSliderValue = value => {\n    let scale;\n    if (value < 0) {\n      scale = -1 / (value - 1);\n    } else {\n      scale = Number(value) + 1;\n    }\n    return scale;\n  }\n  const handleSliderChange = e => setScale(getScaleFromSliderValue(e.target.value));\n  const handleCommandTypeToggle = () => setIsShowingEncodedPathCommands(!isShowingEncodedPathCommands);\n\n  return (\n    <>\n      <section className=\"hero is-primary\">\n        <div className=\"hero-body columns\">\n          <h1 className=\"title level column\">SVG Yoga</h1>\n          <div className=\"column\">\n            <h3 className=\"subtitle\">\n              1. EXPLORE the path by hovering over its segments\n            </h3>\n            <h3 className=\"subtitle\">\n              2. TWEAK path commands directly in the command list\n            </h3>\n            <h3 className=\"subtitle\">\n              3. WARP the path by clicking and dragging control points\n            </h3>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        <div className=\"columns is-centered\">\n          <div className=\"column is-half\">\n            <article className=\"message is-primary\">\n              <div className=\"message-header\">\n                <p>Original</p>\n              </div>\n              <div className=\"message-body box\">\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    return setPathData(inputPathData);\n                  }}\n                >\n                  <textarea\n                    className=\"textarea\"\n                    placeholder=\"paste path data here\"\n                    value={inputPathData}\n                    onChange={(e) => setInputPathData(e.target.value)}\n                  />\n                  <button type=\"submit\" className=\"button is-primary\">\n                    Submit\n                  </button>\n                </form>\n              </div>\n            </article>\n          </div>\n          <div className=\"column is-half\">\n            <article className=\"message is-secondary\">\n              <div className=\"message-header\">\n                <p>Modified</p>\n              </div>\n              <div className=\"message-body box\">\n                <textarea\n                  className=\"textarea\"\n                  value={getRoundedAbsolutePathData(pathData)}\n                  readOnly\n                />\n                <CopyToClipboard\n                  className=\"button is-link\"\n                  text={getRoundedAbsolutePathData(pathData)}\n                  // onCopy={() => setCopied(true)}\n                >\n                  <span>Copy to clipboard</span>\n                </CopyToClipboard>\n              </div>\n            </article>\n          </div>\n        </div>\n      </section>\n\n      {pathData && (\n        <>\n          <section className=\"section\">\n            <div className=\"columns\">\n              <div className=\"column is-half\">\n                <div className=\"control subtitle\">\n                  <div>\n                    <input\n                      type=\"radio\"\n                      checked={isShowingEncodedPathCommands}\n                      name=\"commandType\"\n                      onChange={handleCommandTypeToggle}\n                      className=\"radio\"\n                    />{\" \"}\n                    Encoded path commands (original)\n                  </div>\n                  <div>\n                    <input\n                      type=\"radio\"\n                      checked={!isShowingEncodedPathCommands}\n                      name=\"commandType\"\n                      onChange={handleCommandTypeToggle}\n                      className=\"radio\"\n                    />{\" \"}\n                    Parsed path commands (human-friendlier)\n                  </div>\n                </div>\n              </div>\n              <div className=\"column flex-end\">\n                <p className=\"heading\">\n                  Note: if the path is not visible, try zooming in or out using\n                  the slider.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"columns is-centered vertical-container\">\n              <div className=\"column box list\">\n                <PathCommandsList\n                  pathData={pathData}\n                  selectedCommand={selectedCommand}\n                  highlightedCommand={highlightedCommand}\n                  onMouseOver={highlightCommand}\n                  onMouseOut={unhighlightCommand}\n                  onSave={updatePathData}\n                  isShowingEncodedPathCommands={isShowingEncodedPathCommands}\n                />\n              </div>\n              <div className=\"column box\" ref={canvasRef}>\n                <div>\n                  <input\n                    className=\"slider is-fullwidth is-small is-circle\"\n                    step=\"1\"\n                    min=\"-100\"\n                    max=\"100\"\n                    value={getSliderValueFromScale(scale)}\n                    type=\"range\"\n                    onChange={handleSliderChange}\n                  />\n                  <div className=\"buttons has-addons\">\n                    <button\n                      className={`button ${\n                        arePointsVisible ? \"is-selected\" : \"\"\n                      }`}\n                      onClick={() => setArePointsVisible(!arePointsVisible)}\n                    >\n                      Points\n                    </button>\n                    <button\n                      className={`button ${\n                        areControlPointsVisible ? \"is-selected\" : \"\"\n                      }`}\n                      onClick={() =>\n                        setAreControlPointsVisible(!areControlPointsVisible)\n                      }\n                    >\n                      Control points\n                    </button>\n                  </div>\n                </div>\n                <DraggablePath\n                  data={pathData}\n                  selectedCommand={selectedCommand}\n                  highlightedCommand={highlightedCommand}\n                  onMouseOver={highlightCommand}\n                  onMouseOut={unhighlightCommand}\n                  onDragEnd={setPathData}\n                  onClick={selectCommand}\n                  scale={scale}\n                  arePointsVisible={arePointsVisible}\n                  areControlPointsVisible={areControlPointsVisible}\n                />\n              </div>\n            </div>\n          </section>\n          <section className=\"section\">\n            <DiffViewer\n              oldValue={getRoundedAbsolutePathData(inputPathData)}\n              newValue={getRoundedAbsolutePathData(pathData)}\n            />\n          </section>\n        </>\n      )}\n\n      <footer className=\"section\">\n        <div className=\"columns is-mobile is-centered\">\n          <div className=\"field is-grouped is-grouped-multiline\">\n            <div className=\"control\">Monica Wojciechowska &copy; 2020</div>\n          </div>\n        </div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}