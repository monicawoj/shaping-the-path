{"version":3,"sources":["components/utils.js","components/EditablePathWithPoints.js","App.js","serviceWorker.js","index.js"],"names":["getReferencePathData","d","scaleX","scaleY","SVGPathData","toAbs","scale","encode","EditablePathWithPoints","data","useState","pathData","setPathData","arePointsVisible","setPointsVisibility","className","width","height","transform","fill","stroke","pathCommands","commands","map","segment","i","allSegments","type","x","y","getXValue","x1","y1","x2","y2","getYValue","position","axis","HORIZ_LINE_TO","VERT_LINE_TO","getDragAxis","defaultClassNameDragging","positionOffset","onDrag","e","currentIndex","posX","posY","newPathCommands","newPathData","encodeSVGPath","opacity","r","cx","cy","getPoints","onClick","rows","value","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAEaA,EAAuB,SAACC,EAAGC,EAAQC,GAAZ,OAAuB,IAAIC,IAAYH,GACtEI,QACAC,MAAMJ,EAAQC,GACdI,UCuHUC,G,KAvGgB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMP,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAAa,EAC3BO,mBAASV,EAAqBS,EAAMP,EAAQC,IADjB,mBACpDQ,EADoD,KAC1CC,EAD0C,OAEXF,oBAAS,GAFE,mBAEpDG,EAFoD,KAElCC,EAFkC,KAmF3D,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,UACb,yBAAKC,MAAO,QAASC,OAAQ,SAC3B,uBAAGC,UAAU,iBACX,0BAAMC,KAAK,OAAOC,OAAO,QAAQnB,EAAGU,IACnCE,EArFO,SAAAF,GAChB,IAAMU,EAAe,IAAIjB,IAAYO,GAAUN,QAAQiB,SA2EvD,OA1EeD,EAAaE,KAAI,SAACC,EAASC,EAAGC,GAAiB,IACpDC,EAA+BH,EAA/BG,KAAMC,EAAyBJ,EAAzBI,EAAGC,EAAsBL,EAAtBK,EACXC,GADiCN,EAAnBO,GAAmBP,EAAfQ,GAAeR,EAAXS,GAAWT,EAAPU,GACd,SAAAN,GAChB,OAAKA,GACIF,EAAYD,EAAI,GAAGG,IAIxBO,EAAY,SAAAN,GAChB,OAAKA,GACIH,EAAYD,EAAI,GAAGI,GA+BxBO,EAAW,CACfR,EAAGE,EAAUF,GACbC,EAAGM,EAAUN,IAOf,OACE,kBAAC,IAAD,CACEQ,KAxBgB,SAAAV,GAClB,OAAQA,GACN,KAAKvB,IAAYkC,cACf,MAAO,IAET,KAAKlC,IAAYmC,aACf,MAAO,IAET,QACE,MAAO,QAeHC,CAAYb,GAClBc,yBAAyB,WAEzBL,SAAU,CAAER,EAAGQ,EAASR,EAAGC,EAAGO,EAASP,GACvCa,eAAgB,CAAEd,GAAIQ,EAASR,EAAGC,GAAIO,EAASP,GAK/Cc,OA9Ce,SAACC,EAAGR,GACrB,IAAMS,EAAepB,EACVqB,EAAkBV,EAArBR,EAAYmB,EAASX,EAAZP,EACXmB,EAAkB3B,EAAaE,KAAI,SAACC,EAASC,GACjD,OAAIA,IAAMoB,EACD,eAAKrB,EAAZ,CAAqBI,EAAGkB,EAAMjB,EAAGkB,IAE5BvB,KAEHyB,EAAcC,YAAcF,GAClCpC,EAAYqC,KAsCV,4BACE9B,KAAK,OACLC,OAAO,QACP+B,QAAQ,MACRC,EAAG,EACHC,GAAIvB,EAAUF,GACd0B,GAAInB,EAAUN,SAcM0B,CAAU5C,GAAY,QAIhD,yBAAKI,UAAU,WACb,4BAAQA,UAAU,SAASyC,QAAS,kBAAM1C,GAAqBD,KAC5DA,EAAmB,cAAgB,eAEtC,8BAAUE,UAAU,WAAW0C,KAAM,GAAIC,MAAO/C,EAAUgD,SAAU,SAAAf,GAAC,OAAIhC,EAAYgC,EAAEgB,OAAOF,QAAQG,YAAY,2BC7GpHpD,G,YAAO,2pBAGPP,EAAS,GACTC,EAAS,GAiBA2D,MAff,WACE,OACE,yBAAK/C,UAAU,OACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,SAAd,sBAIF,kBAAC,EAAD,CAAwBN,KAAMA,EAAMP,OAAQA,EAAQC,OAAQA,MCX9C4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.202354d7.chunk.js","sourcesContent":["import { SVGPathData, encodeSVGPath } from \"svg-pathdata\";\n\nexport const getReferencePathData = (d, scaleX, scaleY) => new SVGPathData(d)\n    .toAbs()\n    .scale(scaleX, scaleY)\n    .encode();\n\nexport const getFromBetween = {\n    results: [],\n    string: \"\",\n    getFromBetween: function (sub1, sub2) {\n        if (this.string.indexOf(sub1) < 0 || this.string.indexOf(sub2) < 0) return false;\n        var SP = this.string.indexOf(sub1) + sub1.length;\n        var string1 = this.string.substr(0, SP);\n        var string2 = this.string.substr(SP);\n        var TP = string1.length + string2.indexOf(sub2);\n        return this.string.substring(SP, TP);\n    },\n    removeFromBetween: function (sub1, sub2) {\n        if (this.string.indexOf(sub1) < 0 || this.string.indexOf(sub2) < 0) return false;\n        var removal = sub1 + this.getFromBetween(sub1, sub2) + sub2;\n        this.string = this.string.replace(removal, \"\");\n    },\n    getAllResults: function (sub1, sub2) {\n        // first check to see if we do have both substrings\n        if (this.string.indexOf(sub1) < 0 || this.string.indexOf(sub2) < 0) return;\n\n        // find one result\n        var result = this.getFromBetween(sub1, sub2);\n        // push it to the results array\n        this.results.push(result);\n        // remove the most recently found one from the string\n        this.removeFromBetween(sub1, sub2);\n\n        // if there's more substrings\n        if (this.string.indexOf(sub1) > -1 && this.string.indexOf(sub2) > -1) {\n            this.getAllResults(sub1, sub2);\n        }\n        else return;\n    },\n    get: function (string, sub1, sub2) {\n        this.results = [];\n        this.string = string;\n        this.getAllResults(sub1, sub2);\n        return this.results;\n    }\n};","import React, { useState } from \"react\";\nimport { SVGPathData, encodeSVGPath } from \"svg-pathdata\";\nimport Draggable from \"react-draggable\";\nimport { getReferencePathData } from './utils';\n\nimport \"./styles.scss\";\n\n// our goal: click + drag points that adjust our path\n\n// what we need:\n// start with path data (absolute)\n// need to get all commands\n// for each command, need to get the (x,y) points from that\n// render circles for each of those points (ideally diff color/size for control vs. regular points)\n// make the circle draggable using react-draggable\n// https://github.com/mzabriskie/react-draggable\n// H can only be dragged horizontally\n// V can only be dragged vertically\n// as the user drags, need to update the path command that created this point with the new X and Y values\n// whenever the data updates, need to rerender (hold data in state)\n\nconst EditablePathWithPoints = ({ data, scaleX, scaleY }) => {\n  const [pathData, setPathData] = useState(getReferencePathData(data, scaleX, scaleY));\n  const [arePointsVisible, setPointsVisibility] = useState(false);\n\n  const getPoints = pathData => {\n    const pathCommands = new SVGPathData(pathData).toAbs().commands;\n    const points = pathCommands.map((segment, i, allSegments) => {\n      const { type, x, y, x1, y1, x2, y2 } = segment;\n      const getXValue = x => {\n        if (!x) {\n          return allSegments[i - 1].x;\n        }\n        return x;\n      };\n      const getYValue = y => {\n        if (!y) {\n          return allSegments[i - 1].y;\n        }\n        return y;\n      };\n\n      const handleDrag = (e, position) => {\n        const currentIndex = i;\n        const { x: posX, y: posY } = position;\n        const newPathCommands = pathCommands.map((segment, i) => {\n          if (i === currentIndex) {\n            return { ...segment, x: posX, y: posY };\n          }\n          return segment;\n        });\n        const newPathData = encodeSVGPath(newPathCommands);\n        setPathData(newPathData);\n      };\n\n      const getDragAxis = type => {\n        switch (type) {\n          case SVGPathData.HORIZ_LINE_TO: {\n            return \"x\";\n          }\n          case SVGPathData.VERT_LINE_TO: {\n            return \"y\";\n          }\n          default:\n            return \"both\";\n        }\n      };\n\n      const position = {\n        x: getXValue(x),\n        y: getYValue(y)\n        // x1: x1 ? getXValue(x1) : '',\n        // y1: y1getYValue(y1),\n        // x2: getXValue(x2),\n        // y2: getYValue(y2)\n      };\n\n      return (\n        <Draggable\n          axis={getDragAxis(type)}\n          defaultClassNameDragging=\"dragging\"\n          // defaultPosition={position}\n          position={{ x: position.x, y: position.y }}\n          positionOffset={{ x: -position.x, y: -position.y }}\n          // grid={[25, 25]}\n          // scale={1}\n          // onStart={(e, data) => console.log(data)}\n          // onStop={handleDrag}\n          onDrag={handleDrag}\n        >\n          <circle\n            fill=\"blue\"\n            stroke=\"black\"\n            opacity=\"0.5\"\n            r={5}\n            cx={getXValue(x)}\n            cy={getYValue(y)}\n          />\n        </Draggable>\n      );\n    });\n    return points;\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"visual\">\n        <svg width={\"480px\"} height={\"300px\"}>\n          <g transform=\"translate(60)\">\n            <path fill=\"none\" stroke=\"black\" d={pathData} />\n            {arePointsVisible ? getPoints(pathData) : null}\n          </g>\n        </svg>\n      </div>\n      <div className=\"actions\">\n        <button className=\"button\" onClick={() => setPointsVisibility(!arePointsVisible)}>\n          {arePointsVisible ? \"hide points\" : \"show points\"}\n        </button>\n        <textarea className=\"textarea\" rows={10} value={pathData} onChange={e => setPathData(e.target.value)} placeholder=\"enter path data :)\"></textarea>\n      </div>\n    </div>\n  );\n};\n\nexport default EditablePathWithPoints;","import React from 'react';\nimport EditablePathWithPoints from './components/EditablePathWithPoints';\nimport SegmentedPath from './components/SegmentedPath';\nimport EditableSVGWithPoints from './components/EditableSVGWithPoints';\n\nimport './App.scss';\n\n// some example data\n// const data = \"M 110,10 l 80,80 v -80 h -40\";\nconst data = \"M4.317,16.411c-1.423-1.423-1.423-3.737,0-5.16l8.075-7.984c0.994-0.996,2.613-0.996,3.611,0.001C17,4.264,17,5.884,16.004,6.88l-8.075,7.984c-0.568,0.568-1.493,0.569-2.063-0.001c-0.569-0.569-0.569-1.495,0-2.064L9.93,8.828c0.145-0.141,0.376-0.139,0.517,0.005c0.141,0.144,0.139,0.375-0.006,0.516l-4.062,3.968c-0.282,0.282-0.282,0.745,0.003,1.03c0.285,0.284,0.747,0.284,1.032,0l8.074-7.985c0.711-0.71,0.711-1.868-0.002-2.579c-0.711-0.712-1.867-0.712-2.58,0l-8.074,7.984c-1.137,1.137-1.137,2.988,0.001,4.127c1.14,1.14,2.989,1.14,4.129,0l6.989-6.896c0.143-0.142,0.375-0.14,0.516,0.003c0.143,0.143,0.141,0.374-0.002,0.516l-6.988,6.895C8.054,17.836,5.743,17.836,4.317,16.411\";\n// const data = \"M2.568,7.179H8.96c1.411,0,2.557-1.145,2.557-2.557c0-1.412-1.146-2.557-2.557-2.557H8.534c-0.235,0-0.426,0.19-0.426,0.426c0,0.236,0.191,0.426,0.426,0.426H8.96c0.941,0,1.704,0.763,1.704,1.705S9.901,6.327,8.96,6.327H2.568c-0.236,0-0.426,0.19-0.426,0.426C2.142,6.988,2.333,7.179,2.568,7.179 M15.778,7.179c0-0.941-0.763-1.704-1.704-1.704h-0.427c-0.235,0-0.426,0.19-0.426,0.426c0,0.235,0.19,0.426,0.426,0.426h0.427c0.47,0,0.852,0.382,0.852,0.852c0,0.471-0.382,0.853-0.852,0.853H0.864c-0.236,0-0.426,0.19-0.426,0.426c0,0.235,0.19,0.426,0.426,0.426h13.21C15.016,8.884,15.778,8.12,15.778,7.179 M16.631,9.736H2.568c-0.236,0-0.426,0.19-0.426,0.426c0,0.236,0.19,0.426,0.426,0.426h14.062c0.94,0,1.704,0.764,1.704,1.705s-0.764,1.704-1.704,1.704h-0.427c-0.235,0-0.426,0.19-0.426,0.427c0,0.235,0.19,0.426,0.426,0.426h0.427c1.411,0,2.557-1.145,2.557-2.557S18.042,9.736,16.631,9.736 M10.665,11.44H4.273c-0.236,0-0.426,0.19-0.426,0.426c0,0.236,0.19,0.427,0.426,0.427h6.392c1.412,0,2.557,1.145,2.557,2.557s-1.146,2.557-2.557,2.557h-0.426c-0.236,0-0.426,0.19-0.426,0.426s0.19,0.427,0.426,0.427h0.426c1.883,0,3.41-1.526,3.41-3.409S12.548,11.44,10.665,11.44\";\n\nconst scaleX = 16;\nconst scaleY = 16; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header is-flex\">\n        <h1 className=\"title\">\n          Shaping Your Path\n      </h1>\n      </div>\n      <EditablePathWithPoints data={data} scaleX={scaleX} scaleY={scaleY} />\n        {/* <EditableSVGWithPoints /> */}\n      {/* <SegmentedPath data={data} /> */}\n    </div>\n  );\n}\n\nexport default App;\n\n// https://codesandbox.io/s/mystifying-wozniak-g0wbm\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}